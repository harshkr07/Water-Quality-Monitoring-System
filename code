/*
  Smart Water Quality Monitoring System
  --------------------------------------
  Microcontroller : ESP32
  Sensors         : DS18B20 (Temperature), TDS, pH, Turbidity
  Display         : 20x4 I2C LCD
  Input           : Push Button (for screen switching)
  Features        : Real-time monitoring, LCD display, water safety status
*/

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// ----------------- LCD Setup -----------------
LiquidCrystal_I2C lcd(0x27, 20, 4);  // I2C Address (0x27 or 0x3F)

// ----------------- DS18B20 Setup -----------------
#define ONE_WIRE_BUS 4   // GPIO for DS18B20
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// ----------------- Sensor Pins -----------------
#define TDS_PIN 34
#define PH_PIN 35
#define TURBIDITY_PIN 32
#define BUTTON_PIN 25

// ----------------- Variables -----------------
int screen = 0;  // To track which screen is active
unsigned long lastDebounce = 0;
int buttonState = HIGH;

// Calibration values (to be adjusted after testing)
float phOffset = 0.0;
float tdsFactor = 0.5;
float turbidityFactor = 1.0;

// ----------------- Functions -----------------

// Read Temperature
float getTemperature() {
  sensors.requestTemperatures();
  return sensors.getTempCByIndex(0);
}

// Read TDS (dummy conversion, adjust after calibration)
float getTDS() {
  int analogValue = analogRead(TDS_PIN);
  float voltage = analogValue * (3.3 / 4095.0);
  return voltage * 500 * tdsFactor; // Example scaling
}

// Read pH (dummy conversion, adjust after calibration)
float getPH() {
  int analogValue = analogRead(PH_PIN);
  float voltage = analogValue * (3.3 / 4095.0);
  return 3.5 * voltage + phOffset; // Example scaling
}

// Read Turbidity (dummy conversion, adjust after calibration)
float getTurbidity() {
  int analogValue = analogRead(TURBIDITY_PIN);
  float voltage = analogValue * (3.3 / 4095.0);
  return (voltage * 100) * turbidityFactor; // Example scaling
}

// Determine water status
String getWaterStatus(float tds, float ph, float turbidity) {
  if ((tds < 500) && (ph >= 6.5 && ph <= 8.5) && (turbidity < 5)) {
    return "Safe ✅";
  } else if ((tds < 1000) && (ph >= 6.0 && ph <= 9.0) && (turbidity < 10)) {
    return "Moderate ⚠️";
  } else {
    return "Unsafe ❌";
  }
}

// ----------------- Setup -----------------
void setup() {
  Serial.begin(115200);
  sensors.begin();
  lcd.init();
  lcd.backlight();
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  lcd.setCursor(0, 0);
  lcd.print("Smart Water Quality");
  lcd.setCursor(0, 1);
  lcd.print("   Monitoring Sys   ");
  delay(2000);
  lcd.clear();
}

// ----------------- Loop -----------------
void loop() {
  // Button debounce
  int reading = digitalRead(BUTTON_PIN);
  if (reading == LOW && (millis() - lastDebounce) > 300) {
    screen = (screen + 1) % 3;  // Cycle between 3 screens
    lastDebounce = millis();
    lcd.clear();
  }

  // Read sensors
  float temperature = getTemperature();
  float tds = getTDS();
  float ph = getPH();
  float turbidity = getTurbidity();
  String status = getWaterStatus(tds, ph, turbidity);

  // Display based on current screen
  switch (screen) {
    case 0: // Screen 1
      lcd.setCursor(0, 0);
      lcd.print("Temp: ");
      lcd.print(temperature);
      lcd.print(" C");
      
      lcd.setCursor(0, 1);
      lcd.print("TDS: ");
      lcd.print(tds);
      lcd.print(" ppm");

      lcd.setCursor(0, 2);
      lcd.print("Status: ");
      lcd.print(status);
      break;

    case 1: // Screen 2
      lcd.setCursor(0, 0);
      lcd.print("pH Level: ");
      lcd.print(ph);

      lcd.setCursor(0, 1);
      lcd.print("Turbidity: ");
      lcd.print(turbidity);
      lcd.print(" NTU");

      lcd.setCursor(0, 2);
      lcd.print("Status: ");
      lcd.print(status);
      break;

    case 2: // Screen 3 (All in summary)
      lcd.setCursor(0, 0);
      lcd.print("T:");
      lcd.print(temperature);
      lcd.print("C  pH:");
      lcd.print(ph);

      lcd.setCursor(0, 1);
      lcd.print("TDS:");
      lcd.print(tds);
      lcd.print("ppm");

      lcd.setCursor(0, 2);
      lcd.print("Turb:");
      lcd.print(turbidity);
      lcd.print("NTU");

      lcd.setCursor(0, 3);
      lcd.print("Status: ");
      lcd.print(status);
      break;
  }

  delay(500);
}
